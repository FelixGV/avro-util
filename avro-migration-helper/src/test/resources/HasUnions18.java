/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.acme;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HasUnions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -907261834363465245L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HasUnions\",\"namespace\":\"com.acme\",\"fields\":[{\"name\":\"f1\",\"type\":[\"null\",\"HasUnions\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HasUnions> ENCODER =
      new BinaryMessageEncoder<HasUnions>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HasUnions> DECODER =
      new BinaryMessageDecoder<HasUnions>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<HasUnions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<HasUnions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HasUnions>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this HasUnions to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a HasUnions from a ByteBuffer. */
  public static HasUnions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.acme.HasUnions f1;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HasUnions() {}

  /**
   * All-args constructor.
   * @param f1 The new value for f1
   */
  public HasUnions(com.acme.HasUnions f1) {
    this.f1 = f1;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return f1;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: f1 = (com.acme.HasUnions)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'f1' field.
   * @return The value of the 'f1' field.
   */
  public com.acme.HasUnions getF1() {
    return f1;
  }

  /**
   * Sets the value of the 'f1' field.
   * @param value the value to set.
   */
  public void setF1(com.acme.HasUnions value) {
    this.f1 = value;
  }

  /**
   * Creates a new HasUnions RecordBuilder.
   * @return A new HasUnions RecordBuilder
   */
  public static com.acme.HasUnions.Builder newBuilder() {
    return new com.acme.HasUnions.Builder();
  }

  /**
   * Creates a new HasUnions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HasUnions RecordBuilder
   */
  public static com.acme.HasUnions.Builder newBuilder(com.acme.HasUnions.Builder other) {
    return new com.acme.HasUnions.Builder(other);
  }

  /**
   * Creates a new HasUnions RecordBuilder by copying an existing HasUnions instance.
   * @param other The existing instance to copy.
   * @return A new HasUnions RecordBuilder
   */
  public static com.acme.HasUnions.Builder newBuilder(com.acme.HasUnions other) {
    return new com.acme.HasUnions.Builder(other);
  }

  /**
   * RecordBuilder for HasUnions instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HasUnions>
    implements org.apache.avro.data.RecordBuilder<HasUnions> {

    private com.acme.HasUnions f1;
    private com.acme.HasUnions.Builder f1Builder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.acme.HasUnions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
      if (other.hasF1Builder()) {
        this.f1Builder = com.acme.HasUnions.newBuilder(other.getF1Builder());
      }
    }

    /**
     * Creates a Builder by copying an existing HasUnions instance
     * @param other The existing instance to copy.
     */
    private Builder(com.acme.HasUnions other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
      this.f1Builder = null;
    }

    /**
      * Gets the value of the 'f1' field.
      * @return The value.
      */
    public com.acme.HasUnions getF1() {
      return f1;
    }

    /**
      * Sets the value of the 'f1' field.
      * @param value The value of 'f1'.
      * @return This builder.
      */
    public com.acme.HasUnions.Builder setF1(com.acme.HasUnions value) {
      validate(fields()[0], value);
      this.f1Builder = null;
      this.f1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'f1' field has been set.
      * @return True if the 'f1' field has been set, false otherwise.
      */
    public boolean hasF1() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'f1' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.HasUnions.Builder getF1Builder() {
      if (f1Builder == null) {
        if (hasF1()) {
          setF1Builder(com.acme.HasUnions.newBuilder(f1));
        } else {
          setF1Builder(com.acme.HasUnions.newBuilder());
        }
      }
      return f1Builder;
    }

    /**
     * Sets the Builder instance for the 'f1' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.acme.HasUnions.Builder setF1Builder(com.acme.HasUnions.Builder value) {
      clearF1();
      f1Builder = value;
      return this;
    }

    /**
     * Checks whether the 'f1' field has an active Builder instance
     * @return True if the 'f1' field has an active Builder instance
     */
    public boolean hasF1Builder() {
      return f1Builder != null;
    }

    /**
      * Clears the value of the 'f1' field.
      * @return This builder.
      */
    public com.acme.HasUnions.Builder clearF1() {
      f1 = null;
      f1Builder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HasUnions build() {
      try {
        HasUnions record = new HasUnions();
        if (f1Builder != null) {
          record.f1 = this.f1Builder.build();
        } else {
          record.f1 = fieldSetFlags()[0] ? this.f1 : (com.acme.HasUnions) defaultValue(fields()[0]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HasUnions>
    WRITER$ = (org.apache.avro.io.DatumWriter<HasUnions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HasUnions>
    READER$ = (org.apache.avro.io.DatumReader<HasUnions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
